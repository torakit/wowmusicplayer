# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QTimer,QDateTime
import time

from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QHBoxLayout, QVBoxLayout, QPushButton, QLineEdit,QDialog,QFileDialog
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QLabel
from PyQt5.QtWidgets import QMessageBox, QMenu
import sqlite3


# from PyQt5 import QtCore, QtGui, QtWidgets,Qt
# from PyQt5.QtWidgets import QFileDialog,QListWidgetItem,QAbstractItemView,QGraphicsItem, QGraphicsPixmapItem,QGraphicsScene, QGraphicsView,QLabel,QTableWidgetItem,QApplication,QComboBox
# from PyQt5.QtCore import QTimer,QStringListModel,QSize,QObject,pyqtSignal,QThread,QUrl
from PyQt5.QtGui import QPixmap,QFont,QIcon
# from PyQt5.QtWebEngineWidgets import *
import os
import random,time
from pygame import mixer
from mutagen.mp3 import MP3
# import style
# import pymysql
# from netmusicsearch import *
import requests
# from dler import *
# from lyric import *
import music_tag

from datetime import timedelta

import configparser
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\user\Documents\new musicplayer\settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5.QtCore import QObject , pyqtSignal
class Settings(QDialog):

    def setupUi(self, Form):

        Form.setObjectName("Form")
        Form.resize(389, 352)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(10, 20, 54, 12))
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(10, 220, 54, 12))
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(10, 100, 54, 12))
        self.label_5.setObjectName("label_5")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(10, 160, 54, 12))
        self.label_7.setObjectName("label_7")
        self.picbox = QtWidgets.QCheckBox(Form)
        self.picbox.setGeometry(QtCore.QRect(10, 40, 91, 16))
        self.picbox.setObjectName("picbox")
        self.websearch = QtWidgets.QCheckBox(Form)
        self.websearch.setGeometry(QtCore.QRect(190, 40, 71, 16))
        self.websearch.setObjectName("websearch")
        self.visual = QtWidgets.QCheckBox(Form)
        self.visual.setGeometry(QtCore.QRect(100, 40, 81, 16))
        self.visual.setObjectName("visual")
        self.normalmode = QtWidgets.QCheckBox(Form)
        self.normalmode.setGeometry(QtCore.QRect(140, 70, 71, 16))
        self.normalmode.setObjectName("normalmode")
        self.minimode = QtWidgets.QCheckBox(Form)
        self.minimode.setGeometry(QtCore.QRect(50, 70, 71, 16))
        self.minimode.setObjectName("minimode")
        self.picpath = QtWidgets.QLineEdit(Form)
        self.picpath.setGeometry(QtCore.QRect(10, 120, 113, 20))
        self.picpath.setObjectName("picpath")
        self.picimp = QtWidgets.QPushButton(Form)
        self.picimp.setGeometry(QtCore.QRect(130, 120, 75, 23))
        self.picimp.setObjectName("picimp")
        self.picfolder = QtWidgets.QLineEdit(Form)
        self.picfolder.setGeometry(QtCore.QRect(10, 180, 113, 20))
        self.picfolder.setObjectName("picfolder")
        self.fldimp = QtWidgets.QPushButton(Form)
        self.fldimp.setGeometry(QtCore.QRect(130, 180, 75, 23))
        self.fldimp.setObjectName("fldimp")
        self.skimp = QtWidgets.QPushButton(Form)
        self.skimp.setGeometry(QtCore.QRect(130, 240, 75, 23))
        self.skimp.setObjectName("skimp")
        self.skinpath = QtWidgets.QLineEdit(Form)
        self.skinpath.setGeometry(QtCore.QRect(10, 240, 113, 20))
        self.skinpath.setObjectName("skinpath")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(10, 280, 71, 16))
        self.label_2.setObjectName("label_2")
        self.downloadpath = QtWidgets.QLineEdit(Form)
        self.downloadpath.setGeometry(QtCore.QRect(10, 300, 113, 20))
        self.downloadpath.setObjectName("downloadpath")
        self.downimp = QtWidgets.QPushButton(Form)
        self.downimp.setGeometry(QtCore.QRect(130, 300, 75, 23))
        self.downimp.setObjectName("downimp")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
    
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "功能显示:"))
        self.label_3.setText(_translate("Form", "皮肤:"))
        self.label_5.setText(_translate("Form", "导入图片"))
        self.label_7.setText(_translate("Form", "幻灯片:"))
        self.picbox.setText(_translate("Form", "图片/幻灯片"))
        self.websearch.setText(_translate("Form", "网上搜索"))
        self.visual.setText(_translate("Form", "音乐可视化"))
        self.normalmode.setText(_translate("Form", "一般模式"))
        self.minimode.setText(_translate("Form", "迷你模式"))
        self.picimp.setText(_translate("Form", "导入"))
        self.fldimp.setText(_translate("Form", "导入文件夹"))
        self.skimp.setText(_translate("Form", "导入"))
        self.label_2.setText(_translate("Form", "下载文件夹"))
        self.downimp.setText(_translate("Form", "导入"))

            
        
        self.config=configparser.ConfigParser()

        self.picimp.clicked.connect(self.picchange)
        self.fldimp.clicked.connect(self.picchnage1)
        self.downimp.clicked.connect(self.downpath)
        self.skimp.clicked.connect(self.skinconfig)
    
    def skinconfig(self):
        pass

    def picchnage1(self):
        if self.picfolder.text()=='':
            directory=QFileDialog.getExistingDirectory(self.picfolder,
                    "选取文件夹",
                    "./")
            self.picfolder.setText('{}'.format(directory))
            self.config['DEFAULT']['saver']=directory   
        else:
            self.config['DEFAULT']['saver']=self.picfolder.text()
        
        self.writeconfig()
        
        
    def picchange(self):
        if self.picpath.text()=='':
            directory=QFileDialog.getOpenFileName(self.picpath,"Add picture","","Picture Filed(*.jpg *.gif *.png)")        
            
            self.picpath.setText('{}'.format(directory[0]))
            self.config['DEFAULT']['pic']=directory[0]
        else:
            self.config['DEFAULT']['pic']=self.picpath.text()
        self.writeconfig()
    
    def downpath(self):
        if self.picpath.text()=='':
            directory=QFileDialog.getOpenFileName(self.picpath,"Add picture","","Picture Filed(*.jpg *.gif *.png)")        
            self.picpath.setText(directory[0])
            self.config['DEFAULT']['downpath']=directory[0]
        else:
            self.config['DEFAULT']['downpath']=self.picpath.text()
        self.writeconfig()
        
    def writeconfig(self):
        with open('settings.ini','w') as f:
            self.config.write(f)
    
    def status1(self,a):
        if a==5:
            self.status.setText('图片已导入')
        elif a==7:
            self.status.setText('文件夹已导入')
        elif a==8:
            self.status.setText('下载文件夹已导入')
        elif a==9:
            self.status.setText('皮肤文件夹已导入')
        elif a==10:
            self.status.setText('迷你模式')
        elif a==11:
            self.status.setText('一般模式')
        elif a==12:
            self.status.setText(self.skinname)
        elif a==13:
            self.status.setText('')
        elif a==14:
            self.status.setText('')
        elif a==15:
            self.status.setText('')
        elif a==16:
            self.status.setText('')
        elif a==17:
            self.status.setText('')
        elif a==18:
            self.status.setText('')
        elif a==19:
            self.status.setText('')
        elif a==20:
            self.status.setText('')
        elif a==21:
            self.status.setText('')
        elif a==22:
            self.status.setText('')
        self.timer1.stop()
        self.timer1.deleteLater()
        pass



class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(681, 610)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 380, 511, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.mini = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.mini.setSizeIncrement(QtCore.QSize(0, 0))
        self.mini.setObjectName("mini")
        self.horizontalLayout.addWidget(self.mini)
        self.ranser = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.ranser.setObjectName("ranser")
        self.horizontalLayout.addWidget(self.ranser)
        self.play = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.play.setObjectName("play")
        self.horizontalLayout.addWidget(self.play)
        self.pre = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pre.setObjectName("pre")
        self.horizontalLayout.addWidget(self.pre)
        self.next = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.next.setObjectName("next")
        self.horizontalLayout.addWidget(self.next)
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.volm = QtWidgets.QSlider(self.horizontalLayoutWidget)
        self.volm.setOrientation(QtCore.Qt.Horizontal)
        self.volm.setObjectName("horizontalSlider")
        self.horizontalLayout.addWidget(self.volm)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.gridLayoutWidget = QtWidgets.QWidget(Form)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(540, 310, 121, 111))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.scan = QtWidgets.QLabel(self.gridLayoutWidget)
        self.scan.setText("")
        self.scan.setObjectName("scan")
        self.gridLayout.addWidget(self.scan, 0, 0, 1, 1)
        self.playlist = QtWidgets.QTableWidget(Form)
        self.a=221
        self.playlist.setGeometry(QtCore.QRect(20, 21, self.a, 241))
        self.playlist.setObjectName("playlist")
        self.playlist.setHorizontalHeaderLabels(['歌名', '歌手', '专辑', '播放时间'])
        
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(20, 329, 511, 51))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.slider= QtWidgets.QSlider(self.horizontalLayoutWidget_2)
        self.slider.setOrientation(QtCore.Qt.Horizontal)
        self.slider.setObjectName("slider")
        self.horizontalLayout_2.addWidget(self.slider)
        self.time1 = QtWidgets.QLabel(Form)
        self.time1.setGeometry(QtCore.QRect(400, 310, 54, 12))
        self.time1.setObjectName("time1")
        self.total = QtWidgets.QLabel(Form)
        self.total.setGeometry(QtCore.QRect(460, 310, 54, 12))
        self.total.setObjectName("total")
        self.importbtn = QtWidgets.QPushButton(Form)
        self.importbtn.setGeometry(QtCore.QRect(20, 270, 75, 23))
        self.importbtn.setObjectName("importbtn")
        self.delbtn = QtWidgets.QPushButton(Form)
        self.delbtn.setGeometry(QtCore.QRect(160, 270, 75, 23))
        self.delbtn.setObjectName("delbtn")
        self.plsinp = QtWidgets.QLineEdit(Form)
        self.plsinp.setGeometry(QtCore.QRect(20, 300, 113, 21))
        self.plsinp.setObjectName("plsinp")
        self.plsbtn = QtWidgets.QPushButton(Form)
        self.plsbtn.setGeometry(QtCore.QRect(160, 300, 75, 23))
        self.plsbtn.setObjectName("plsbtn")
        self.set = QtWidgets.QPushButton(Form)
        self.set.setGeometry(QtCore.QRect(570, 0, 75, 23))
        self.set.setObjectName("set")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(440, 30, 221, 131))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.serbtn = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.serbtn.setObjectName("serbtn")
        self.gridLayout_2.addWidget(self.serbtn, 1, 1, 1, 1)
        self.serinput = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.serinput.setObjectName("serinput")
        self.gridLayout_2.addWidget(self.serinput, 1, 0, 1, 1)
        self.serl1 = QtWidgets.QTableWidget(self.gridLayoutWidget_2)
        self.serl1.setObjectName("serl1")
        self.serl1.setColumnCount(0)
        self.serl1.setRowCount(0)
        self.gridLayout_2.addWidget(self.serl1, 2, 0, 1, 2)
        self.tog2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.tog2.setObjectName("tog2")
        self.gridLayout_2.addWidget(self.tog2, 0, 0, 1, 1)
        self.tog0y = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.tog0y.setObjectName("tog0y")
        self.gridLayout_2.addWidget(self.tog0y, 0, 1, 1, 1)
        self.tog0 = QtWidgets.QPushButton(Form)
        self.tog0.setGeometry(QtCore.QRect(170, 0, 71, 23))
        self.tog0.setObjectName("tog0")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(Form)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(250, 0, 181, 161))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.tog1 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.tog1.setObjectName("tog1")
        self.gridLayout_3.addWidget(self.tog1, 0, 0, 1, 1)
        self.disa1 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.disa1.setObjectName("disa1")
        self.gridLayout_3.addWidget(self.disa1, 0, 1, 1, 1)
        self.wallp = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.wallp.setObjectName("wallp")
        self.gridLayout_3.addWidget(self.wallp, 1, 0, 1, 2)
        self.lyriclist = QtWidgets.QListWidget(Form)
        self.lyriclist.setGeometry(QtCore.QRect(170, 450, 491, 71))
        self.lyriclist.setObjectName("lyriclist")
        self.status = QtWidgets.QLabel(Form)
        self.status.setGeometry(QtCore.QRect(20, 530, 641, 20))
        self.status.setObjectName("status")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(630, 431, 31, 20))
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayoutWidget_4 = QtWidgets.QWidget(Form)
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(250, 170, 411, 131))
        self.gridLayoutWidget_4.setObjectName("gridLayoutWidget_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.tog3 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        self.tog3.setObjectName("tog3")
        self.gridLayout_4.addWidget(self.tog3, 0, 1, 1, 1)
        self.dis3 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        self.dis3.setObjectName("dis3")
        self.gridLayout_4.addWidget(self.dis3, 0, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem1, 0, 0, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(self.gridLayoutWidget_4)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout_4.addWidget(self.graphicsView, 1, 0, 1, 3)

        self.config=configparser.ConfigParser()
        self.config.read('settings.ini')
        
        
        self.lyriclist = QtWidgets.QListWidget(Form)
        self.lyriclist.setGeometry(QtCore.QRect(20, 450, 641, 71))
        self.lyriclist.setObjectName("lyriclist")
        
        
        
        self.cover = QtWidgets.QLabel(Form)
        self.cover.setGeometry(QtCore.QRect(23, 431, 131, 91))
        self.cover.setText("")
        self.cover.setObjectName("label_3")
        self.jump = QtWidgets.QPushButton(Form)
        self.jump.setGeometry(QtCore.QRect(630, 431, 31, 20))
        self.jump.setObjectName("pushButton_2")


        

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.mini.setText(_translate("Form", "min"))
        self.ranser.setText(_translate("Form", "ran/ser"))
        self.play.setText(_translate("Form", "p"))
        self.pre.setText(_translate("Form", "pre"))
        self.next.setText(_translate("Form", "next"))
        self.time1.setText(_translate("Form", "00:00:00"))
        self.total.setText(_translate("Form", "/ 00:00:00"))
        self.importbtn.setText(_translate("Form", "导入"))
        self.delbtn.setText(_translate("Form", "删除"))
        self.plsbtn.setText(_translate("Form", "搜索"))
        self.set.setText(_translate("Form", "设定"))
        self.serbtn.setText(_translate("Form", "搜索"))
        self.tog2.setText(_translate("Form", "-"))
        self.tog0y.setText(_translate("Form", "2o"))
        self.tog0.setText(_translate("Form", "-"))
        self.tog1.setText(_translate("Form", "-"))
        self.disa1.setText(_translate("Form", "1o"))
        self.status.setText(_translate("Form", ""))
        self.tog3.setText(_translate("Form", "-"))
        self.dis3.setText(_translate("Form", "3o"))
        self.tog2.clicked.connect(self.set2)#searchb
        self.tog3.clicked.connect(self.set3)#vg
        # self.tog1.clicked.connect(self.set1)#wp

        self.testup()
        # self.skip()
        self.ena=True
        self.a=221
        self.tog0.clicked.connect(self.toggle0)#playlist
        self.set.clicked.connect(self.opendialogwin)
        self.checksettingfile()
        self.closeevent(0)#这里因为每次启动也是跑这个,那么我就没必要重复写个函数了
        
        
    
        """
        self.ser1 #
        self.mini #
        self.ranser #
        self.set #
        self.delbtn
        self.plsbtn #localsearch
        self.play #play
        self.pre #preview
        self.next #next
        self.ser1 #websearch
        self.plsinp #localsearchinp
        self.serinput #searchinp
        self.volm
        self.slider
        """
    
#1############################################################################
    def opendialogwin(self):
        
        dialog=QDialog()
        # self.t1.stop()
        # self.t1.deleteLater()
        dialog.ui = Settings()
        
        dialog.ui.setupUi(dialog)
        dialog.closeEvent=self.closeevent
        dialog.show()
        dialog.exec_()
    def textup(self):
        self.config.read('settings.ini')
        pic=self.config['DEFAULT']['pic']='./images/unnamed (50).jpg'
        if pic or pic!=0:
            print('图片')
            self.timer2=QTimer()
            self.timer2.start(1)
            self.timer2.timeout.connect(lambda:self.picchange(pic))
    
    def closeevent(self,event):
        self.config.read('settings.ini')
        pic,saver,skin,down='0','0','0','0'
        if "pic" in self.config['DEFAULT']:
            pic=self.config['DEFAULT']['pic']
        if "saver" in self.config['DEFAULT']:
            saver=self.config['DEFAULT']['saver']
        if "skinconfig" in self.config['DEFAULT']:
            skin=self.config['DEFAULT']['skinconfig']
        if "downpath" in self.config['DEFAULT']:
            down=self.config['DEFAULT']['downpath']
        if pic!='0':
            self.picchange(self.config['DEFAULT']['pic'])
        if saver!='0':        
            self.scrsaver(self.config['DEFAULT']['saver'])
        if skin!='0':
            pass#皮肤之后会讲,大家不要着急
        
        if down!='0':
            pass#涉及有些音乐下载功能已经烂大街基本照抄了,
                # 所以爬虫那块我不会讲,但其实有地方直接抄,
                # 这提示已经很够了....
                # 会在之后简单带一下selenium
        
    def checksettingfile(self):
        if os.path.exists('./settings.ini'):
            pass
        else:
            self.config['DEFAULT']['pic']='0'
            self.config['DEFAULT']['saver']='0'
            self.config['DEFAULT']['downpath']='0'
            self.config['DEFAULT']['skinconfig']='0'
            self.writeconfig()
    
    def writeconfig(self):
        with open('settings.ini','w') as f:
            self.config.write(f)
        
        
    def folderloop(self,folder):
        for root,d,f in os.walk(folder):
            for i in f:
                if i.endswith('.jpg'):
                    fullname=os.path.join(root,i)
                elif i.endswith('.gif'):
                    fullname=os.path.join(root,i)
                elif i.endswith('.png'):
                    fullname=os.path.join(root,i)
                self.t1=QTimer()
                self.t1.start(2500)
                self.t1.timeout.connect(lambda:self.picchange1(fullname))
    def scrsaver(self,folder):
        
        for root,dirs,files in os.walk(folder,topdown=False):
            
            root=str(root)
            
            filenames=[os.path.join(root,i) for i in files]
            rang=len(filenames)
            
            self.rang=rang-1
            self.rang2=rang-1
            
            self.timer2=QTimer()    
            
            self.timer2.start(2000)
            self.timer2.timeout.connect(lambda:self.picchange1(filenames[self.rang]))

    def picchange1(self,filename):
                print(filename)
                self.rang-=1
                
                self.wallp.setPixmap(QPixmap(filename))
     
                if self.rang==0:
                    self.rang=self.rang2
                
                
                
       
        
        

    def picchange(self,filename):
        self.wallp.setPixmap(QPixmap(filename))
        
        self.timer1=QTimer()
        self.timer1.start(1)
        self.timer1.timeout.connect(lambda:self.status1(5))
        
    

    
    def importfile(self):
        filex , check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                               "", "All Files (*);;mp3文件 (*.mp3)")
        if check:
            print(filex)

        from pathlib import Path
        path = Path(filex)
        filename=path.name
        # filenamewithout=path.stem
        with open("c:\\1\\pic.jpg","rb") as f:                   # 打开二进制文件
            pic=f.read() 
        
        i=("歌名","歌手","专辑","4:00",pic,"歌词路径","文件路径","歌词")
        self.insertdb(i)
    
        
    
    
#2####################################################################################    
    def coverplace(self,picture):#封面显示
        self.cover.setPixmap(QPixmap(picture))
    
    def sqlconn(self):
        # conn = pymysql.connect(host='localhost', port=3306, user='root', password="123456", db="tb1")
        conn = sqlite3.connect('.\\admin.db')
        return conn
    def testup(self):
        try:
            self.readdb()
        except:
            self.createdb()
        if not os.path.isfile('./settings.ini'):
            self.config=configparser.ConfigParser()
            self.config['DEFAULT']={'pic':'0','saver':'0','down':'0','skinpath':'0'}
            

            
            
    def createdb(self):
        # try:
        conn=self.sqlconn()
        cur=conn.cursor()
        sql="""CREATE TABLE "song" (
	"id"	INTEGER,
	"songname"	TEXT,
	"name"	TEXT,
	"album"	TEXT,
	"timelength"	TEXT,
	"cover"	TEXT,
	"lyricpath"	TEXT,
	"filepath"	TEXT,
	"lyric"	TEXT,
	PRIMARY KEY("id" AUTOINCREMENT)
);"""
        cur.execute(sql)
        
        self.timer1=QTimer()
        self.timer1.timeout.connect(lambda :self.status1(3))
        self.timer1.start(1)
        # except:
        #     self.timer1=QTimer()
        #     self.timer1.timeout.connect(lambda :self.status1(4))
        #     self.timer1.start(1)
        cur.close()
            
    def readdb(self):
        try:
            conn = self.sqlconn()

            cur = conn.cursor()
            
            sql="select * from 'song'"
        
            cur.execute(sql)
            data=cur.fetchall()
            self.playlist.setColumnCount(7)
            self.playlist.setRowCount(len(data[0]))
            
            y=0
            for i in data:
                x=0
                for j in i:
                    print(f'column{x},row{y},值:{j}')
                    if y!=5:
                        self.playlist.setitem(x,y,QtWidgets.QTableWidgetItem(str(j)))
                        print(f"x,y:{x} {y}")
                        
                
                    else:
                        self.coverplace(j)
                        #data[x][5]是cover的数据,里面就是存放的图片的blob,其实应该再tag里面找,这里只是测试
                    x+=1
                y+=1
        except:     
 
            print('ERROR')
        
    

    
    def insertdb(self,i):
        conn = self.sqlconn1()

        cur = conn.cursor()
        sql = """insert into 'song' ("songname","name","album","timelength","lyricpath","cover","filepath") values (?,?,?,?,?,
                                                    ?,?)"""

        try:
      
            cur.execute(sql,i)
            conn.commit()
            self.timer1=QTimer()
            self.timer1.timeout.connect(lambda :self.status1(1))
            self.timer1.start(1)
        except:
            self.timer1=QTimer()
            self.timer1.timeout.connect(lambda :self.status1(2))
            self.timer1.start(1)
            conn.rollback()
        self.readdb()
   
    
    def deldb(self):
        id=self.tableWidget.selectedItems()[0].text()
        file=self.tableWidget.selectedItems()[1].text()
        
        try:
            # os.remove(file)#删除文件
            pass
        except:
            self.timer1=QTimer()
            self.timer1.timeout.connect(lambda :self.status1(6))
            self.timer1.start(1)
            return
        conn = self.sqlconn1()        
        cur = conn.cursor()
        

        sql = f"delete from 'tb1' where 序号={id}"

        cur.execute(sql)
        conn.commit()
        conn.close()
    
        self.readdb()
    
    def status1(self,a):
        if a==1:
            self.status.setText('音乐文件已导入')
            
        elif a==2:
            self.status.setText('导入失败')
            
        elif a==3:
            self.status.setText('播放列表创建成功')
            
        elif a==4:
            self.status.setText('列表创建失败')
        
        elif a==5:
            self.status.setText('图片已导入')
        elif a==6:
            self.status.setText('文件无法删除')
        elif a==7:
            self.status.setText('')
        elif a==8:
            self.status.setText('')
        elif a==9:
            self.status.setText('')
        elif a==10:
            self.status.setText('')
        elif a==11:
            self.status.setText('')
        elif a==12:
            self.status.setText('')
        elif a==13:
            self.status.setText('')
        elif a==14:
            self.status.setText('')
        elif a==15:
            self.status.setText('')
        elif a==16:
            self.status.setText('')
        elif a==17:
            self.status.setText('')
        elif a==18:
            self.status.setText('')
        elif a==19:
            self.status.setText('')
        elif a==20:
            self.status.setText('')
        elif a==21:
            self.status.setText('')
        elif a==22:
            self.status.setText('')
        self.timer1.stop()
        self.timer1.deleteLater()
        pass
#3####################################################################################    
    
            
    
#2####################################################################################    
    
#1#############################################################################################
    def set2(self):
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(250, 30, 411, 421))
        # self.gridLayoutWidget_2.hide()
        pass
    
    def set3(self):
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(250, 30, 411, 421))
        # self.gridLayoutWidget_2.hide()
        pass
    def disa2(self):
        pass
    def toggle2(self):
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(0, 0, 681, 431))

        self.timer=QTimer()
        self.timer.setTimerType(Qt.PreciseTimer)
        self.timer.setInterval(1)
        self.timer.timeout.connect(self.smoothy2)
        self.timer.start()

    def toggle1(self):
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 681, 431))
        
        self.timer=QTimer()
        self.timer.setTimerType(Qt.PreciseTimer)
        self.timer.setInterval(1)
        self.timer.timeout.connect(self.smoothy2)
        self.timer.start()

    def toggle0(self):

        self.timer=QTimer()
        self.timer.setTimerType(Qt.PreciseTimer)
        self.timer.setInterval(1)
        self.timer.timeout.connect(self.smoothy1)
        self.timer.start()
        
    def smoothy1(self):
        
        if self.ena==True:
            self.a-=3
            self.playlist.resize(self.a, 241)
            if self.a<1:
                self.a=0
                

                self.ena=False
                self.timer.stop()
                self.timer.deleteLater()
                self.playlist.hide()

        if self.ena==False:

            if self.a!=0:
                self.playlist.show()
            self.a+=1
            self.playlist.resize(self.a, 241)
            if self.a>219:
                self.a=221
                self.ena=True
                self.timer.stop()
                self.timer.deleteLater()
    
    
    def smoothy1(self):
        
        if self.ena==True:
            self.a-=3
            self.playlist.resize(self.a, 241)
            if self.a<1:
                self.a=0
                

                self.ena=False
                self.timer.stop()
                self.timer.deleteLater()
                self.playlist.hide()

        if self.ena==False:

            if self.a!=0:
                self.playlist.show()
            self.a+=1
            self.playlist.resize(self.a, 241)
            if self.a>219:
                self.a=221
                self.ena=True
                self.timer.stop()
                self.timer.deleteLater()
                
    def smoothy2(self):
        
        if self.ena==True:
            self.a-=3
            self.playlist.resize(self.a, 241)
            if self.a<1:
                self.a=0
                

                self.ena=False
                self.timer.stop()
                self.timer.deleteLater()
                self.playlist.hide()

        if self.ena==False:

            if self.a!=0:
                self.playlist.show()
            self.a+=1
            self.playlist.resize(self.a, 241)
            if self.a>219:
                self.a=221
                self.ena=True
                self.timer.stop()
                self.timer.deleteLater()
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())


